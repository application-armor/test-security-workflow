name: Container Security Scan
on:
  workflow_call:
    secrets:
      ORG_PAT_GITHUB:
        required: true
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  schedule:
    - cron: '35 21 * * 3'

permissions:
  contents: read
  pull-requests: write
  actions: read
  security-events: write

jobs:
  security-scan:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
    permissions:
      contents: read
      security-events: write
      actions: read
    name: Security Scan
    runs-on: "ubuntu-24.04"
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Trivy Scanning
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: false
        env:
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db:1

      # Add tool identifier to Trivy results
      - name: Process Trivy results
        if: always()
        run: |
          sed -i 's/"ruleId": "/"ruleId": "TRIVY-/g' trivy-results.sarif
          sed -i 's/"id": "/"id": "TRIVY-/g' trivy-results.sarif

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-scan'

      # Anchore Container Scanning
      - name: Build container image
        run: |
          docker build -t localbuild/testimage:latest .

      - name: Run Anchore Container Scan
        uses: anchore/scan-action@v3
        with:
          image: "localbuild/testimage:latest"
          fail-build: true
          severity-cutoff: high
          acs-report-enable: true
          output-format: "sarif"

      # Add tool identifier to Anchore results
      - name: Process Anchore results
        if: always()
        run: |
          sed -i 's/"ruleId": "/"ruleId": "ANCHORE-/g' results.sarif
          sed -i 's/"id": "/"id": "ANCHORE-/g' results.sarif

      - name: Upload Anchore scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif
          category: 'anchore-scan'

      # ClamAV Scanning
      - name: Install ClamAV
        run: |
          sudo apt-get update
          sudo apt-get install -y clamav clamav-daemon
          sudo freshclam
          sudo service clamav-daemon start

      - name: Run ClamAV Scan
        id: clamav
        run: |
          # Create results directory
          mkdir -p scan-results
          
          # Run ClamAV scan and save results
          clamscan --recursive --infected --detect-pua=yes --log=scan-results/clamav.log .
          
          # Check for viruses and create SARIF format
          echo '{
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [{
              "tool": {
                "driver": {
                  "name": "ClamAV",
                  "rules": []
                }
              },
              "results": ['> scan-results/clamav-results.sarif
          
          # Process ClamAV logs and convert to SARIF
          if grep -q "FOUND" scan-results/clamav.log; then
            while IFS= read -r line; do
              if [[ $line == *"FOUND"* ]]; then
                echo "{
                  \"ruleId\": \"CLAMAV-MALWARE\",
                  \"level\": \"error\",
                  \"message\": {
                    \"text\": \"$line\"
                  },
                  \"locations\": [{
                    \"physicalLocation\": {
                      \"artifactLocation\": {
                        \"uri\": \"$(echo $line | cut -d: -f1)\"
                      }
                    }
                  }]
                }," >> scan-results/clamav-results.sarif
              fi
            done < scan-results/clamav.log
            # Remove last comma and close JSON
            sed -i '$ s/,$//' scan-results/clamav-results.sarif
            echo "]}]}" >> scan-results/clamav-results.sarif
            echo "Malware found! Check scan-results/clamav.log for details"
            exit 1
          else
            echo "]}]}" >> scan-results/clamav-results.sarif
            echo "No malware found"
          fi

      - name: Upload ClamAV scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: scan-results/clamav-results.sarif
          category: 'clamav-scan'

      # Generate HTML summary report
      - name: Create Summary Report
        if: always()
        run: |
          echo "## Security Scan Summary" > scan-summary.md
          echo "### Trivy Findings" >> scan-summary.md
          echo "\`\`\`" >> scan-summary.md
          jq -r '.runs[].results[] | "[\(.level)] \(.ruleId): \(.message.text)"' trivy-results.sarif >> scan-summary.md
          echo "\`\`\`" >> scan-summary.md
          echo "### Anchore Findings" >> scan-summary.md
          echo "\`\`\`" >> scan-summary.md
          jq -r '.runs[].results[] | "[\(.level)] \(.ruleId): \(.message.text)"' results.sarif >> scan-summary.md
          echo "\`\`\`" >> scan-summary.md
          echo "### ClamAV Findings" >> scan-summary.md
          echo "\`\`\`" >> scan-summary.md
          if [ -f scan-results/clamav.log ]; then
            cat scan-results/clamav.log >> scan-summary.md
          else
            echo "No ClamAV findings" >> scan-summary.md
          fi
          echo "\`\`\`" >> scan-summary.md

      - name: Upload Summary Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-summary
          path: scan-summary.md

  
  sync-to-jira:
    needs: security-scan  # This ensures sync runs after scanning completes
    uses: application-armor/security-workflow-template/.github/workflows/vulnerability-sync.yml@main
    secrets:
      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
      JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
      JIRA_EPIC_KEY: ${{ secrets.JIRA_EPIC_KEY }}
    
