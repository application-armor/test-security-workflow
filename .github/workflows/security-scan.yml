name: Container Security Scan
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  schedule:
    - cron: '35 21 * * 3'

permissions:
  contents: read
  pull-requests: write
  actions: read
  security-events: write

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Trivy Scanning
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: false

      # Add tool identifier to Trivy results
      - name: Process Trivy results
        if: always()
        run: |
          sed -i 's/"ruleId": "/"ruleId": "TRIVY-/g' trivy-results.sarif
          sed -i 's/"id": "/"id": "TRIVY-/g' trivy-results.sarif

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-scan'

      # Anchore Container Scanning
      - name: Build container image
        run: |
          docker build -t localbuild/testimage:latest .

      - name: Run Anchore Container Scan
        uses: anchore/scan-action@v3
        with:
          image: "localbuild/testimage:latest"
          fail-build: true
          severity-cutoff: high
          acs-report-enable: true
          output-format: "sarif"

      # Add tool identifier to Anchore results
      - name: Process Anchore results
        if: always()
        run: |
          sed -i 's/"ruleId": "/"ruleId": "ANCHORE-/g' results.sarif
          sed -i 's/"id": "/"id": "ANCHORE-/g' results.sarif

      - name: Upload Anchore scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif
          category: 'anchore-scan'

      # Generate HTML summary report
      - name: Create Summary Report
        if: always()
        run: |
          echo "## Security Scan Summary" > scan-summary.md
          echo "### Trivy Findings" >> scan-summary.md
          echo "\`\`\`" >> scan-summary.md
          jq -r '.runs[].results[] | "[\(.level)] \(.ruleId): \(.message.text)"' trivy-results.sarif >> scan-summary.md || echo "No Trivy findings" >> scan-summary.md
          echo "\`\`\`" >> scan-summary.md
          echo "### Anchore Findings" >> scan-summary.md
          echo "\`\`\`" >> scan-summary.md
          jq -r '.runs[].results[] | "[\(.level)] \(.ruleId): \(.message.text)"' results.sarif >> scan-summary.md || echo "No Anchore findings" >> scan-summary.md
          echo "\`\`\`" >> scan-summary.md

      - name: Upload Summary Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-summary
          path: scan-summary.md

  sync-vulnerabilities:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Run vulnerability sync script
        env:
          GITHUB_TOKEN: ${{ github.token }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_EPIC_KEY: ${{ secrets.JIRA_EPIC_KEY }}
        run: python .github/scripts/sync_vulnerabilities.py
